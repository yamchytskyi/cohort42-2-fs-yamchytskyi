<configuration scan="true" scanPeriod="30 seconds">
    <!--
    Атрибуты для автоматической подгрузки изменений в конфигурации:
    - scan="true": Включает автоматическое сканирование конфигурации Logback.
    - scanPeriod="30 seconds": Интервал проверки изменений. Logback будет проверять изменения
      в этом файле каждые 30 секунд и автоматически применять их, если файл был изменен.
    -->

    <!-- Консольный аппендер (ConsoleAppender), который выводит логи в консоль -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- Настройка форматирования вывода -->
        <encoder>
            <!--
            Шаблон для лог-сообщений:
            - %d{yyyy-MM-dd HH:mm:ss.SSS}: Дата и время в формате "год-месяц-день часы:минуты:секунды.миллисекунды".
            - [%thread]: Имя потока, в котором выполняется логируемый код. Это полезно для многопоточных приложений.
            - %-5level: Уровень логирования (например, DEBUG, INFO, WARN, ERROR), выровненный по левому краю,
                        с минимальной шириной 5 символов.
            - %logger{36}: Имя логгера (например, имя класса или пакета). Ограничено 36 символами, чтобы длинные
                           имена не занимали слишком много места.
            - %msg: Текст лог-сообщения, переданный в вызов логгера.
            - %n: Символ новой строки, добавляющий перенос на новую строку после каждого сообщения.
            -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--
    Аппендер для записи логов в файл (RollingFileAppender), который создает новый файл каждый день и архивирует старые
    логи.
    -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- Путь к основному файлу логов, в который будут записываться текущие сообщения -->
        <file>./logs/app.log</file>

        <!-- Настройка форматирования вывода -->
        <encoder>
            <!-- Шаблон логирования (такой же, как в STDOUT) -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>

        <!--
        Политика ротации (создания новых файлов):
        - TimeBasedRollingPolicy: Политика ротации на основе времени. Здесь указано, что новый файл создается каждый день.
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--
            Шаблон для имен архивных файлов:
            - fileNamePattern="./logs/archived/app-%d{yyyy-MM-dd}.log.zip": Каждый день создается новый архивный файл
              с именем, включающим дату, например, "app-2024-11-14.log.zip". Файл будет упакован в ZIP-архив для
              экономии места.
            -->
            <fileNamePattern>./logs/archived/app-%d{yyyy-MM-dd}.log.zip</fileNamePattern>

            <!--
            maxHistory: Определяет количество дней, в течение которых хранятся архивные файлы. В данном случае
            указано 30, что означает, что файлы старше 30 дней будут автоматически удалены. Это помогает управлять
            размером хранилища, избегая накопления устаревших логов.
            -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <!--
    Корневой логгер (root), который определяет минимальный уровень логирования для всех сообщений.
    - level="DEBUG": Указывает минимальный уровень логирования для записи сообщений в лог.
      Уровни, которые ниже указанного уровня, будут игнорироваться.
      Порядок уровней логирования: TRACE < DEBUG < INFO < WARN < ERROR.
      Здесь установлен уровень DEBUG, что означает, что сообщения уровней DEBUG и выше (INFO, WARN, ERROR) будут записаны.
    -->
    <root level="DEBUG">
        <!--
        Привязка аппендеров к корневому логгеру:
        - appender-ref ref="STDOUT": Сообщения будут выводиться в консоль через аппендер STDOUT.
        - appender-ref ref="FILE": Сообщения также будут записываться в файл через аппендер FILE.
        -->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>

</configuration>